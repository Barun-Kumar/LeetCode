class Solution {
    
    public boolean O2_implicit(int [] nums){
        boolean result=false;
        if(nums.length==1){
            return result;
        }else{
            for(int i=0;i<nums.length-1;i++){
                for(int j=i+1;j<nums.length;j++){
                    if(nums[i]==nums[j]){
                        result=true;
                        return result;
                    }
                }
            }
        }
        return result;
    }
    
    public boolean On_with_extra_map(int nums[]){
        Set<Integer> set = new HashSet();
        for(int i=0;i<nums.length;i++){
            if(set.add(nums[i])==false){
              return true;
            }
        }
        return false;
    }
    
    public boolean java_eight(int [] nums){
        return nums.length!=Arrays.stream(nums).distinct().count();
    }
    public boolean containsDuplicate(int[] nums) {
          //return On_with_extra_map(nums);
        return java_eight(nums);
    }
}
